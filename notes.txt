design:
- alarms = 1 message, many upvotes
- upvote belongs to alarm. user cannot access /upvotes or other upvote paths
- alert user on /alarms (or /) reload if there's an alarm, after reloading (no ajax)
  - and/or play a sound?
	- ...or pretend you're playing a sound :/

test cases:
- basic. user can...
  √ see list of all alarms
  - create alarm & it is created
	- delete alarm & it is deleted
	- edit alarm & it is edited
	- user A sees most recent alarm created on page load (popup?)
- message validation... 
  √ <= 200 characters
	√ unicode works
	- codey characters rejected and/or html tags stripped
- bell sound:
  - ding when 1 or more alarms
	- no ding when no alarms
- edge/advanced
  - two users can see each other's alarms?
	- user not alerted to same alarms multiple times?
	- non-XSS security testing? injecting alarms/upvotes outside of system?
	- if no alarms exist, no popup on page load
- when adding votes:
	- default alarm score is 0
  - user can upvote alarm; score is retained on reload
	- user can upvote multiple alarms, multiple times?
* automate all (unless impossible) + test all manually
  - use fixture data?

testing goals: 
- no bugs (user can make alarms & upvote them)
- app developed with TDD whenever possible
- verified secure by security testing

testing assumptions:
- user identities don't matter
- all users are on Mac OSX. heh
? all users are on Chrome? or what does minitest use?
? dev, staging, and production environments are equivalent?

where did i get stuck?
- ajax for alarms (live-updating is hard, i think. and even alert popups require ajax?)
- minitest capabilities. can i verify page contents or not? can i verify that there's a popup?
- playing sound on the page: not sure how to test this via script